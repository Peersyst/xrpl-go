package transaction

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestTxResult_String(t *testing.T) {
	tests := []struct {
		name     string
		txResult TxResult
		expected string
	}{
		// Tec codes
		{"TecAMM_ACCOUNT", TecAMM_ACCOUNT, "tecAMM_ACCOUNT"},
		{"TecAMM_UNFUNDED", TecAMM_UNFUNDED, "tecAMM_UNFUNDED"},
		{"TecAMM_BALANCE", TecAMM_BALANCE, "tecAMM_BALANCE"},
		{"TecAMM_EMPTY", TecAMM_EMPTY, "tecAMM_EMPTY"},
		{"TecAMM_FAILED", TecAMM_FAILED, "tecAMM_FAILED"},
		{"TecAMM_INVALID_TOKENS", TecAMM_INVALID_TOKENS, "tecAMM_INVALID_TOKENS"},
		{"TecAMM_NOT_EMPTY", TecAMM_NOT_EMPTY, "tecAMM_NOT_EMPTY"},
		{"TecCANT_ACCEPT_OWN_NFTOKEN_OFFER", TecCANT_ACCEPT_OWN_NFTOKEN_OFFER, "tecCANT_ACCEPT_OWN_NFTOKEN_OFFER"},
		{"TecCLAIM", TecCLAIM, "tecCLAIM"},
		{"TecCRYPTOCONDITION_ERROR", TecCRYPTOCONDITION_ERROR, "tecCRYPTOCONDITION_ERROR"},
		{"TecDIR_FULL", TecDIR_FULL, "tecDIR_FULL"},
		{"TecDUPLICATE", TecDUPLICATE, "tecDUPLICATE"},
		{"TecDST_TAG_NEEDED", TecDST_TAG_NEEDED, "tecDST_TAG_NEEDED"},
		{"TecEMPTY_DID", TecEMPTY_DID, "tecEMPTY_DID"},
		{"TecEXPIRED", TecEXPIRED, "tecEXPIRED"},
		{"TecFAILED_PROCESSING", TecFAILED_PROCESSING, "tecFAILED_PROCESSING"},
		{"TecFROZEN", TecFROZEN, "tecFROZEN"},
		{"TecHAS_OBLIGATIONS", TecHAS_OBLIGATIONS, "tecHAS_OBLIGATIONS"},
		{"TecINSUF_RESERVE_LINE", TecINSUF_RESERVE_LINE, "tecINSUF_RESERVE_LINE"},
		{"TecINSUF_RESERVE_OFFER", TecINSUF_RESERVE_OFFER, "tecINSUF_RESERVE_OFFER"},
		{"TecINSUFF_FEE", TecINSUFF_FEE, "tecINSUFF_FEE"},
		{"TecINSUFFICIENT_FUNDS", TecINSUFFICIENT_FUNDS, "tecINSUFFICIENT_FUNDS"},
		{"TecINSUFFICIENT_PAYMENT", TecINSUFFICIENT_PAYMENT, "tecINSUFFICIENT_PAYMENT"},
		{"TecINSUFFICIENT_RESERVE", TecINSUFFICIENT_RESERVE, "tecINSUFFICIENT_RESERVE"},
		{"TecINTERNAL", TecINTERNAL, "tecINTERNAL"},
		{"TecINVARIANT_FAILED", TecINVARIANT_FAILED, "tecINVARIANT_FAILED"},
		{"TecKILLED", TecKILLED, "tecKILLED"},
		{"TecMAX_SEQUENCE_REACHED", TecMAX_SEQUENCE_REACHED, "tecMAX_SEQUENCE_REACHED"},
		{"TecNEED_MASTER_KEY", TecNEED_MASTER_KEY, "tecNEED_MASTER_KEY"},
		{"TecNFTOKEN_BUY_SELL_MISMATCH", TecNFTOKEN_BUY_SELL_MISMATCH, "tecNFTOKEN_BUY_SELL_MISMATCH"},
		{"TecNFTOKEN_OFFER_TYPE_MISMATCH", TecNFTOKEN_OFFER_TYPE_MISMATCH, "tecNFTOKEN_OFFER_TYPE_MISMATCH"},
		{"TecNO_ALTERNATIVE_KEY", TecNO_ALTERNATIVE_KEY, "tecNO_ALTERNATIVE_KEY"},
		{"TecNO_AUTH", TecNO_AUTH, "tecNO_AUTH"},
		{"TecNO_DST", TecNO_DST, "tecNO_DST"},
		{"TecNO_DST_INSUF_XRP", TecNO_DST_INSUF_XRP, "tecNO_DST_INSUF_XRP"},
		{"TecNO_ENTRY", TecNO_ENTRY, "tecNO_ENTRY"},
		{"TecNO_ISSUER", TecNO_ISSUER, "tecNO_ISSUER"},
		{"TecNO_LINE", TecNO_LINE, "tecNO_LINE"},
		{"TecNO_LINE_INSUF_RESERVE", TecNO_LINE_INSUF_RESERVE, "tecNO_LINE_INSUF_RESERVE"},
		{"TecNO_LINE_REDUNDANT", TecNO_LINE_REDUNDANT, "tecNO_LINE_REDUNDANT"},
		{"TecNO_PERMISSION", TecNO_PERMISSION, "tecNO_PERMISSION"},
		{"TecNO_REGULAR_KEY", TecNO_REGULAR_KEY, "tecNO_REGULAR_KEY"},
		{"TecNO_SUITABLE_NFTOKEN_PAGE", TecNO_SUITABLE_NFTOKEN_PAGE, "tecNO_SUITABLE_NFTOKEN_PAGE"},
		{"TecNO_TARGET", TecNO_TARGET, "tecNO_TARGET"},
		{"TecOBJECT_NOT_FOUND", TecOBJECT_NOT_FOUND, "tecOBJECT_NOT_FOUND"},
		{"TecOVERSIZE", TecOVERSIZE, "tecOVERSIZE"},
		{"TecOWNERS", TecOWNERS, "tecOWNERS"},
		{"TecPATH_DRY", TecPATH_DRY, "tecPATH_DRY"},
		{"TecPATH_PARTIAL", TecPATH_PARTIAL, "tecPATH_PARTIAL"},
		{"TecTOO_SOON", TecTOO_SOON, "tecTOO_SOON"},
		{"TecUNFUNDED", TecUNFUNDED, "tecUNFUNDED"},
		{"TecUNFUNDED_ADD", TecUNFUNDED_ADD, "tecUNFUNDED_ADD"},
		{"TecUNFUNDED_PAYMENT", TecUNFUNDED_PAYMENT, "tecUNFUNDED_PAYMENT"},
		{"TecUNFUNDED_OFFER", TecUNFUNDED_OFFER, "tecUNFUNDED_OFFER"},

		// Tef codes
		{"TefALREADY", TefALREADY, "tefALREADY"},
		{"TefBAD_ADD_AUTH", TefBAD_ADD_AUTH, "tefBAD_ADD_AUTH"},
		{"TefBAD_AUTH", TefBAD_AUTH, "tefBAD_AUTH"},
		{"TefBAD_AUTH_MASTER", TefBAD_AUTH_MASTER, "tefBAD_AUTH_MASTER"},
		{"TefBAD_LEDGER", TefBAD_LEDGER, "tefBAD_LEDGER"},
		{"TefBAD_QUORUM", TefBAD_QUORUM, "tefBAD_QUORUM"},
		{"TefBAD_SIGNATURE", TefBAD_SIGNATURE, "tefBAD_SIGNATURE"},
		{"TefCREATED", TefCREATED, "tefCREATED"},
		{"TefEXCEPTION", TefEXCEPTION, "tefEXCEPTION"},
		{"TefFAILURE", TefFAILURE, "tefFAILURE"},
		{"TefINTERNAL", TefINTERNAL, "tefINTERNAL"},
		{"TefINVARIANT_FAILED", TefINVARIANT_FAILED, "tefINVARIANT_FAILED"},
		{"TefMASTER_DISABLED", TefMASTER_DISABLED, "tefMASTER_DISABLED"},
		{"TefMAX_LEDGER", TefMAX_LEDGER, "tefMAX_LEDGER"},
		{"TefNFTOKEN_IS_NOT_TRANSFERABLE", TefNFTOKEN_IS_NOT_TRANSFERABLE, "tefNFTOKEN_IS_NOT_TRANSFERABLE"},
		{"TefNO_AUTH_REQUIRED", TefNO_AUTH_REQUIRED, "tefNO_AUTH_REQUIRED"},
		{"TefNO_TICKET", TefNO_TICKET, "tefNO_TICKET"},
		{"TefNOT_MULTI_SIGNING", TefNOT_MULTI_SIGNING, "tefNOT_MULTI_SIGNING"},
		{"TefPAST_SEQ", TefPAST_SEQ, "tefPAST_SEQ"},
		{"TefTOO_BIG", TefTOO_BIG, "tefTOO_BIG"},
		{"TefWRONG_PRIOR", TefWRONG_PRIOR, "tefWRONG_PRIOR"},

		// Tel codes
		{"TelBAD_DOMAIN", TelBAD_DOMAIN, "telBAD_DOMAIN"},
		{"TelBAD_PATH_COUNT", TelBAD_PATH_COUNT, "telBAD_PATH_COUNT"},
		{"TelBAD_PUBLIC_KEY", TelBAD_PUBLIC_KEY, "telBAD_PUBLIC_KEY"},
		{"TelCAN_NOT_QUEUE", TelCAN_NOT_QUEUE, "telCAN_NOT_QUEUE"},
		{"TelCAN_NOT_QUEUE_BALANCE", TelCAN_NOT_QUEUE_BALANCE, "telCAN_NOT_QUEUE_BALANCE"},
		{"TelCAN_NOT_QUEUE_BLOCKS", TelCAN_NOT_QUEUE_BLOCKS, "telCAN_NOT_QUEUE_BLOCKS"},
		{"TelCAN_NOT_QUEUE_BLOCKED", TelCAN_NOT_QUEUE_BLOCKED, "telCAN_NOT_QUEUE_BLOCKED"},
		{"TelCAN_NOT_QUEUE_FEE", TelCAN_NOT_QUEUE_FEE, "telCAN_NOT_QUEUE_FEE"},
		{"TelCAN_NOT_QUEUE_FULL", TelCAN_NOT_QUEUE_FULL, "telCAN_NOT_QUEUE_FULL"},
		{"TelFAILED_PROCESSING", TelFAILED_PROCESSING, "telFAILED_PROCESSING"},
		{"TelINSUF_FEE_P", TelINSUF_FEE_P, "telINSUF_FEE_P"},
		{"TelLOCAL_ERROR", TelLOCAL_ERROR, "telLOCAL_ERROR"},
		{"TelNETWORK_ID_MAKES_TX_NON_CANONICAL", TelNETWORK_ID_MAKES_TX_NON_CANONICAL, "telNETWORK_ID_MAKES_TX_NON_CANONICAL"},
		{"TelNO_DST_PARTIAL", TelNO_DST_PARTIAL, "telNO_DST_PARTIAL"},
		{"TelREQUIRES_NETWORK_ID", TelREQUIRES_NETWORK_ID, "telREQUIRES_NETWORK_ID"},
		{"TelWRONG_NETWORK", TelWRONG_NETWORK, "telWRONG_NETWORK"},

		// Tem codes
		{"TemBAD_AMM_TOKENS", TemBAD_AMM_TOKENS, "temBAD_AMM_TOKENS"},
		{"TemBAD_AMOUNT", TemBAD_AMOUNT, "temBAD_AMOUNT"},
		{"TemBAD_AUTH_MASTER", TemBAD_AUTH_MASTER, "temBAD_AUTH_MASTER"},
		{"TemBAD_CURRENCY", TemBAD_CURRENCY, "temBAD_CURRENCY"},
		{"TemBAD_EXPIRATION", TemBAD_EXPIRATION, "temBAD_EXPIRATION"},
		{"TemBAD_FEE", TemBAD_FEE, "temBAD_FEE"},
		{"TemBAD_ISSUER", TemBAD_ISSUER, "temBAD_ISSUER"},
		{"TemBAD_LIMIT", TemBAD_LIMIT, "temBAD_LIMIT"},
		{"TemBAD_NFTOKEN_TRANSFER_FEE", TemBAD_NFTOKEN_TRANSFER_FEE, "temBAD_NFTOKEN_TRANSFER_FEE"},
		{"TemBAD_OFFER", TemBAD_OFFER, "temBAD_OFFER"},
		{"TemBAD_PATH", TemBAD_PATH, "temBAD_PATH"},
		{"TemBAD_PATH_LOOP", TemBAD_PATH_LOOP, "temBAD_PATH_LOOP"},
		{"TemBAD_SEND_XRP_LIMIT", TemBAD_SEND_XRP_LIMIT, "temBAD_SEND_XRP_LIMIT"},
		{"TemBAD_SEND_XRP_MAX", TemBAD_SEND_XRP_MAX, "temBAD_SEND_XRP_MAX"},
		{"TemBAD_SEND_XRP_NO_DIRECT", TemBAD_SEND_XRP_NO_DIRECT, "temBAD_SEND_XRP_NO_DIRECT"},
		{"TemBAD_SEND_XRP_PARTIAL", TemBAD_SEND_XRP_PARTIAL, "temBAD_SEND_XRP_PARTIAL"},
		{"TemBAD_SEND_XRP_PATHS", TemBAD_SEND_XRP_PATHS, "temBAD_SEND_XRP_PATHS"},
		{"TemBAD_SEQUENCE", TemBAD_SEQUENCE, "temBAD_SEQUENCE"},
		{"TemBAD_SIGNATURE", TemBAD_SIGNATURE, "temBAD_SIGNATURE"},
		{"TemBAD_SRC_ACCOUNT", TemBAD_SRC_ACCOUNT, "temBAD_SRC_ACCOUNT"},
		{"TemBAD_TRANSFER_RATE", TemBAD_TRANSFER_RATE, "temBAD_TRANSFER_RATE"},
		{"TemCANNOT_PREAUTH_SELF", TemCANNOT_PREAUTH_SELF, "temCANNOT_PREAUTH_SELF"},
		{"TemDST_IS_SRC", TemDST_IS_SRC, "temDST_IS_SRC"},
		{"TemDST_NEEDED", TemDST_NEEDED, "temDST_NEEDED"},
		{"TemINVALID", TemINVALID, "temINVALID"},
		{"TemINVALID_COUNT", TemINVALID_COUNT, "temINVALID_COUNT"},
		{"TemINVALID_FLAG", TemINVALID_FLAG, "temINVALID_FLAG"},
		{"TemMALFORMED", TemMALFORMED, "temMALFORMED"},
		{"TemREDUNDANT", TemREDUNDANT, "temREDUNDANT"},
		{"TemREDUNDANT_SEND_MAX", TemREDUNDANT_SEND_MAX, "temREDUNDANT_SEND_MAX"},
		{"TemRIPPLE_EMPTY", TemRIPPLE_EMPTY, "temRIPPLE_EMPTY"},
		{"TemBAD_WEIGHT", TemBAD_WEIGHT, "temBAD_WEIGHT"},
		{"TemBAD_SIGNER", TemBAD_SIGNER, "temBAD_SIGNER"},
		{"TemBAD_QUORUM", TemBAD_QUORUM, "temBAD_QUORUM"},
		{"TemUNCERTAIN", TemUNCERTAIN, "temUNCERTAIN"},
		{"TemUNKNOWN", TemUNKNOWN, "temUNKNOWN"},
		{"TemDISABLED", TemDISABLED, "temDISABLED"},

		// Ter codes
		{"TerFUNDS_SPENT", TerFUNDS_SPENT, "terFUNDS_SPENT"},
		{"TerINSUF_FEE_B", TerINSUF_FEE_B, "terINSUF_FEE_B"},
		{"TerLAST", TerLAST, "terLAST"},
		{"TerNO_ACCOUNT", TerNO_ACCOUNT, "terNO_ACCOUNT"},
		{"TerNO_AMM", TerNO_AMM, "terNO_AMM"},
		{"TerNO_AUTH", TerNO_AUTH, "terNO_AUTH"},
		{"TerNO_LINE", TerNO_LINE, "terNO_LINE"},
		{"TerNO_RIPPLE", TerNO_RIPPLE, "terNO_RIPPLE"},
		{"TerOWNERS", TerOWNERS, "terOWNERS"},
		{"TerPRE_SEQ", TerPRE_SEQ, "terPRE_SEQ"},
		{"TerPRE_TICKET", TerPRE_TICKET, "terPRE_TICKET"},
		{"TerQUEUED", TerQUEUED, "terQUEUED"},
		{"TerRETRY", TerRETRY, "terRETRY"},
		{"TerSUBMITTED", TerSUBMITTED, "terSUBMITTED"},

		// Tes codes
		{
			name:     "TesSUCCESS",
			txResult: TesSUCCESS,
			expected: "tesSUCCESS",
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := test.txResult.String()
			require.Equal(t, test.expected, result)
		})
	}
}