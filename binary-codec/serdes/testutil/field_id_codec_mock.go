// Code generated by MockGen. DO NOT EDIT.
// Source: serdes/interfaces/field_id_codec.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFieldIDCodec is a mock of FieldIDCodec interface.
type MockFieldIDCodec struct {
	ctrl     *gomock.Controller
	recorder *MockFieldIDCodecMockRecorder
}

// MockFieldIDCodecMockRecorder is the mock recorder for MockFieldIDCodec.
type MockFieldIDCodecMockRecorder struct {
	mock *MockFieldIDCodec
}

// NewMockFieldIDCodec creates a new mock instance.
func NewMockFieldIDCodec(ctrl *gomock.Controller) *MockFieldIDCodec {
	mock := &MockFieldIDCodec{ctrl: ctrl}
	mock.recorder = &MockFieldIDCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldIDCodec) EXPECT() *MockFieldIDCodecMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockFieldIDCodec) Decode(h string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", h)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockFieldIDCodecMockRecorder) Decode(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockFieldIDCodec)(nil).Decode), h)
}

// Encode mocks base method.
func (m *MockFieldIDCodec) Encode(fieldName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", fieldName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockFieldIDCodecMockRecorder) Encode(fieldName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockFieldIDCodec)(nil).Encode), fieldName)
}
