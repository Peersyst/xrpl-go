"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[886],{5962:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"xrpl/currency","title":"currency","description":"Overview","source":"@site/docs/xrpl/currency.md","sourceDirName":"xrpl","slug":"/xrpl/currency","permalink":"/docs/xrpl/currency","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/xrpl/currency.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"xrpl"},"next":{"title":"faucet","permalink":"/docs/xrpl/faucet"}}');var s=n(5105),t=n(3461);const c={},i="currency",a={},d=[{value:"Overview",id:"overview",level:2},{value:"XRP/Drops conversions",id:"xrpdrops-conversions",level:2},{value:"Usage",id:"usage",level:2},{value:"API",id:"api",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"currency",children:"currency"})}),"\n",(0,s.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"currency"})," is a package that provides utility functions to handle XRPL ledger currency types. For ",(0,s.jsx)(r.strong,{children:"native currency"}),", it provides XRP and drops conversions. For ",(0,s.jsx)(r.strong,{children:"IOUs"}),", it provides utility functions to convert non-standard currency codes (you can learn more about it in the ",(0,s.jsx)(r.a,{href:"https://xrpl.org/docs/references/protocol/data-types/currency-formats#nonstandard-currency-codes",children:"official documentation"}),")."]}),"\n",(0,s.jsx)(r.h2,{id:"xrpdrops-conversions",children:"XRP/Drops conversions"}),"\n",(0,s.jsx)(r.p,{children:"The package provides the following functions to convert XRP to drops and vice versa:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"func XrpToDrops(value string) (string, error)\nfunc DropsToXrp(value string) (string, error)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Both functions return the converted value as a string and an error if the value is not a valid number."}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.p,{children:"To import the package, you can use the following code:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'import "github.com/Peersyst/xrpl-go/xrpl/currency"\n'})}),"\n",(0,s.jsx)(r.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:"// XRP <-> Drops conversions\nfunc XrpToDrops(value string) (string, error)\nfunc DropsToXrp(value string) (string, error)\n\n// Non-standard currency codes conversions\nfunc ConvertStringToHex(input string) string\nfunc ConvertHexToString(input string) (string, error)\n"})})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},3461:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>i});var o=n(8101);const s={},t=o.createContext(s);function c(e){const r=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);