"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[741],{103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"xrpl/wallet","title":"wallet","description":"Overview","source":"@site/docs/xrpl/wallet.md","sourceDirName":"xrpl","slug":"/xrpl/wallet","permalink":"/docs/xrpl/wallet","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/xrpl/wallet.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transaction","permalink":"/docs/xrpl/transaction"},"next":{"title":"websocket","permalink":"/docs/xrpl/websocket"}}');var r=t(4848),s=t(8453);const i={},l="wallet",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Generating a wallet",id:"generating-a-wallet",level:2},{value:"Signing and multisigning transactions",id:"signing-and-multisigning-transactions",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"wallet",children:"wallet"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"wallet"})," package contains the types and functions to work and manage your XRPL accounts. Either you want to create a new account, or you want to sign transactions, this package has you covered."]}),"\n",(0,r.jsx)(n.p,{children:"This package enables you to do the following actions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generate new wallets using a seed, mnemonic or random."}),"\n",(0,r.jsx)(n.li,{children:"Sign and multisign transactions."}),"\n",(0,r.jsx)(n.li,{children:"Access to wallet's public and private keys and address."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"generating-a-wallet",children:"Generating a wallet"}),"\n",(0,r.jsxs)(n.p,{children:["In order to generate a new wallet, you can either use a ",(0,r.jsx)(n.strong,{children:"seed"}),", a ",(0,r.jsx)(n.strong,{children:"mnemonic"})," or generate a ",(0,r.jsx)(n.strong,{children:"random"})," one. Here are the constructors available:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Wallet constructors\nfunc New(alg interfaces.CryptoImplementation) (Wallet, error)\nfunc FromSeed(seed string, masterAddress string) (Wallet, error)\nfunc FromSecret(seed string) (Wallet, error)\nfunc FromMnemonic(mnemonic string) (*Wallet, error)\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["When generating a random wallet, you will need to specify the algorithm you want to use.\n",(0,r.jsx)(n.code,{children:"xrpl-go"})," library provides the package ",(0,r.jsx)(n.code,{children:"crypto"})," that exports ",(0,r.jsx)(n.code,{children:"ed25519"})," and ",(0,r.jsx)(n.code,{children:"secp256k1"})," algorithms which satisfy the ",(0,r.jsx)(n.code,{children:"CryptoImplementation"})," interface.\nYou can use the ",(0,r.jsx)(n.code,{children:"crypto"})," package by importing it in your project:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/xrpl-go/pkg/crypto"\n'})})]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["When initializing a wallet from a seed, remember that only seeds generated by ",(0,r.jsx)(n.code,{children:"ed25519"})," and ",(0,r.jsx)(n.code,{children:"secp256k1"})," algorithms are supported. Learn more about XRPL cryptographic keys in the ",(0,r.jsx)(n.a,{href:"https://xrpl.org/docs/concepts/accounts/cryptographic-keys",children:"official documentation"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"signing-and-multisigning-transactions",children:"Signing and multisigning transactions"}),"\n",(0,r.jsxs)(n.p,{children:["A wallet lets the developer sign and multisign transactions easily. The ",(0,r.jsx)(n.code,{children:"Wallet"})," type exposes the following signing methods:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Signing methods\nfunc (w *Wallet) Sign(tx map[string]interface{}) (string, string, error)\nfunc (w *Wallet) Multisign(tx map[string]interface{}) (string, string, error)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Sign"})," method signs a flat transaction and returns the signed transaction blob and the signature."]}),"\n",(0,r.jsxs)(n.p,{children:["On the other hand, the ",(0,r.jsx)(n.code,{children:"Multisign"})," method multisigns a flat transaction by adding the wallet's signature to the transaction and returning the resulting transaction blob and the blob hash. Learn more about how multisigns work in the ",(0,r.jsx)(n.a,{href:"https://xrpl.org/docs/concepts/accounts/multi-signing",children:"official documentation"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["In this section, we will see how to generate a ",(0,r.jsx)(n.code,{children:"Wallet"}),", call the faucet to get XRP, and send the XRP to another account.\nFirst step is to generate a ",(0,r.jsx)(n.code,{children:"Wallet"})," using the ",(0,r.jsx)(n.code,{children:"New"})," constructor (in this case, we will use the ",(0,r.jsx)(n.code,{children:"ed25519"})," algorithm):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"wallet, err := wallet.New(crypto.ED25519())\nif err != nil {\n    // ...\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once we have the ",(0,r.jsx)(n.code,{children:"Wallet"}),", we can call the faucet to get XRP. For this example, we will use the ",(0,r.jsx)(n.code,{children:"DevnetFaucetProvider"})," to get XRP on the ",(0,r.jsx)(n.code,{children:"devnet"})," ledger:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"devnetFaucet := faucet.NewDevnetFaucetProvider()\n\nerr := devnetFaucet.FundWallet(wallet.ClassicAddress)\nif err != nil {\n    // ...\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once we have the XRP, we can create a ",(0,r.jsx)(n.code,{children:"Payment"})," transaction. For this example, we will send the XRP to the ",(0,r.jsx)(n.code,{children:"rJ96831v5JXxna35JYvsW9VRmENwq23ib9"})," account."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'payment := transaction.Payment{\n    BaseTx: transaction.BaseTx{\n        Account: wallet.ClassicAddress,\n    },\n    Destination: "rJ96831v5JXxna35JYvsW9VRmENwq23ib9",\n    Amount:      types.XRPCurrencyAmount(10000000),\n    DeliverMax:  types.XRPCurrencyAmount(10000000),\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Finally, we can sign the flat payment transaction:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"blob, hash, err := wallet.Sign(payment.Flatten())\nif err != nil {\n    // ...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Summarizing, the complete code to generate a wallet, call the faucet to get XRP, create a payment transaction and sign it is the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"log"\n\n\t"github.com/Peersyst/xrpl-go/pkg/crypto"\n\t"github.com/Peersyst/xrpl-go/xrpl/transaction"\n\t"github.com/Peersyst/xrpl-go/xrpl/transaction/types"\n\t"github.com/Peersyst/xrpl-go/xrpl/wallet"\n)\n\nfunc main() {\n\twallet, err := wallet.New(crypto.ED25519())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tpayment := transaction.Payment{\n\t\tBaseTx: transaction.BaseTx{\n\t\t\tAccount: wallet.ClassicAddress,\n\t\t},\n\t\tDestination: "rJ96831v5JXxna35JYvsW9VRmENwq23ib9",\n\t\tAmount:      types.XRPCurrencyAmount(10000000),\n\t\tDeliverMax:  types.XRPCurrencyAmount(10000000),\n\t}\n\n\tblob, hash, err := wallet.Sign(payment.Flatten())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println("Tx blob: ", blob)\n\tfmt.Println("Tx hash: ", hash)\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);